version: '3.8'

services:
  # FastAPI Backend Service
  api:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: promptly-api
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URL=mongodb://mongo:27017/promptly
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev-secret-key-change-in-production}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/healthz" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    volumes:
      - ../backend:/app
    networks:
      - promptly-network

  # React Frontend Service
  web:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: promptly-web
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:8000
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ../frontend:/app
      - /app/node_modules
    networks:
      - promptly-network

  # MongoDB Database Service
  mongo:
    image: mongo:7
    container_name: promptly-mongo
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=promptly
    volumes:
      - mongo-data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - promptly-network

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: promptly-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - promptly-network

  # MinIO Object Storage Service
  minio:
    image: minio/minio:latest
    container_name: promptly-minio
    ports:
      - "9000:9000" # API port
      - "9001:9001" # Console port
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - promptly-network

# Named volumes for data persistence
volumes:
  mongo-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local

# Custom network for service communication
networks:
  promptly-network:
    driver: bridge
